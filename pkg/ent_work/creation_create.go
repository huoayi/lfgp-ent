// Code generated by ent, DO NOT EDIT.

package ent_work

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/huoayi/lfgp-ent/pkg/ent_work/creation"
	"github.com/huoayi/lfgp-ent/pkg/ent_work/user"
	"github.com/huoayi/lfgp-ent/pkg/enum"
)

// CreationCreate is the builder for creating a Creation entity.
type CreationCreate struct {
	config
	mutation *CreationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (cc *CreationCreate) SetCreatedBy(i int64) *CreationCreate {
	cc.mutation.SetCreatedBy(i)
	return cc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cc *CreationCreate) SetNillableCreatedBy(i *int64) *CreationCreate {
	if i != nil {
		cc.SetCreatedBy(*i)
	}
	return cc
}

// SetUpdatedBy sets the "updated_by" field.
func (cc *CreationCreate) SetUpdatedBy(i int64) *CreationCreate {
	cc.mutation.SetUpdatedBy(i)
	return cc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cc *CreationCreate) SetNillableUpdatedBy(i *int64) *CreationCreate {
	if i != nil {
		cc.SetUpdatedBy(*i)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CreationCreate) SetCreatedAt(t time.Time) *CreationCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CreationCreate) SetNillableCreatedAt(t *time.Time) *CreationCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CreationCreate) SetUpdatedAt(t time.Time) *CreationCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CreationCreate) SetNillableUpdatedAt(t *time.Time) *CreationCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *CreationCreate) SetDeletedAt(t time.Time) *CreationCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *CreationCreate) SetNillableDeletedAt(t *time.Time) *CreationCreate {
	if t != nil {
		cc.SetDeletedAt(*t)
	}
	return cc
}

// SetCreationType sets the "creation_type" field.
func (cc *CreationCreate) SetCreationType(et enum.CreationType) *CreationCreate {
	cc.mutation.SetCreationType(et)
	return cc
}

// SetNillableCreationType sets the "creation_type" field if the given value is not nil.
func (cc *CreationCreate) SetNillableCreationType(et *enum.CreationType) *CreationCreate {
	if et != nil {
		cc.SetCreationType(*et)
	}
	return cc
}

// SetParameter sets the "parameter" field.
func (cc *CreationCreate) SetParameter(s string) *CreationCreate {
	cc.mutation.SetParameter(s)
	return cc
}

// SetNillableParameter sets the "parameter" field if the given value is not nil.
func (cc *CreationCreate) SetNillableParameter(s *string) *CreationCreate {
	if s != nil {
		cc.SetParameter(*s)
	}
	return cc
}

// SetURL sets the "url" field.
func (cc *CreationCreate) SetURL(s string) *CreationCreate {
	cc.mutation.SetURL(s)
	return cc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (cc *CreationCreate) SetNillableURL(s *string) *CreationCreate {
	if s != nil {
		cc.SetURL(*s)
	}
	return cc
}

// SetUserID sets the "user_id" field.
func (cc *CreationCreate) SetUserID(i int64) *CreationCreate {
	cc.mutation.SetUserID(i)
	return cc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cc *CreationCreate) SetNillableUserID(i *int64) *CreationCreate {
	if i != nil {
		cc.SetUserID(*i)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CreationCreate) SetID(i int64) *CreationCreate {
	cc.mutation.SetID(i)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CreationCreate) SetNillableID(i *int64) *CreationCreate {
	if i != nil {
		cc.SetID(*i)
	}
	return cc
}

// SetUser sets the "user" edge to the User entity.
func (cc *CreationCreate) SetUser(u *User) *CreationCreate {
	return cc.SetUserID(u.ID)
}

// Mutation returns the CreationMutation object of the builder.
func (cc *CreationCreate) Mutation() *CreationMutation {
	return cc.mutation
}

// Save creates the Creation in the database.
func (cc *CreationCreate) Save(ctx context.Context) (*Creation, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CreationCreate) SaveX(ctx context.Context) *Creation {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CreationCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CreationCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CreationCreate) defaults() {
	if _, ok := cc.mutation.CreatedBy(); !ok {
		v := creation.DefaultCreatedBy
		cc.mutation.SetCreatedBy(v)
	}
	if _, ok := cc.mutation.UpdatedBy(); !ok {
		v := creation.DefaultUpdatedBy
		cc.mutation.SetUpdatedBy(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := creation.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := creation.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.DeletedAt(); !ok {
		v := creation.DefaultDeletedAt
		cc.mutation.SetDeletedAt(v)
	}
	if _, ok := cc.mutation.CreationType(); !ok {
		v := creation.DefaultCreationType
		cc.mutation.SetCreationType(v)
	}
	if _, ok := cc.mutation.Parameter(); !ok {
		v := creation.DefaultParameter
		cc.mutation.SetParameter(v)
	}
	if _, ok := cc.mutation.URL(); !ok {
		v := creation.DefaultURL
		cc.mutation.SetURL(v)
	}
	if _, ok := cc.mutation.UserID(); !ok {
		v := creation.DefaultUserID
		cc.mutation.SetUserID(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := creation.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CreationCreate) check() error {
	if _, ok := cc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent_work: missing required field "Creation.created_by"`)}
	}
	if _, ok := cc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent_work: missing required field "Creation.updated_by"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent_work: missing required field "Creation.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent_work: missing required field "Creation.updated_at"`)}
	}
	if _, ok := cc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent_work: missing required field "Creation.deleted_at"`)}
	}
	if _, ok := cc.mutation.CreationType(); !ok {
		return &ValidationError{Name: "creation_type", err: errors.New(`ent_work: missing required field "Creation.creation_type"`)}
	}
	if v, ok := cc.mutation.CreationType(); ok {
		if err := creation.CreationTypeValidator(v); err != nil {
			return &ValidationError{Name: "creation_type", err: fmt.Errorf(`ent_work: validator failed for field "Creation.creation_type": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Parameter(); !ok {
		return &ValidationError{Name: "parameter", err: errors.New(`ent_work: missing required field "Creation.parameter"`)}
	}
	if _, ok := cc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent_work: missing required field "Creation.url"`)}
	}
	if _, ok := cc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent_work: missing required field "Creation.user_id"`)}
	}
	if _, ok := cc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent_work: missing required edge "Creation.user"`)}
	}
	return nil
}

func (cc *CreationCreate) sqlSave(ctx context.Context) (*Creation, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CreationCreate) createSpec() (*Creation, *sqlgraph.CreateSpec) {
	var (
		_node = &Creation{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(creation.Table, sqlgraph.NewFieldSpec(creation.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreatedBy(); ok {
		_spec.SetField(creation.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := cc.mutation.UpdatedBy(); ok {
		_spec.SetField(creation.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(creation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(creation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.SetField(creation.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := cc.mutation.CreationType(); ok {
		_spec.SetField(creation.FieldCreationType, field.TypeEnum, value)
		_node.CreationType = value
	}
	if value, ok := cc.mutation.Parameter(); ok {
		_spec.SetField(creation.FieldParameter, field.TypeString, value)
		_node.Parameter = value
	}
	if value, ok := cc.mutation.URL(); ok {
		_spec.SetField(creation.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if nodes := cc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   creation.UserTable,
			Columns: []string{creation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Creation.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CreationUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (cc *CreationCreate) OnConflict(opts ...sql.ConflictOption) *CreationUpsertOne {
	cc.conflict = opts
	return &CreationUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Creation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CreationCreate) OnConflictColumns(columns ...string) *CreationUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CreationUpsertOne{
		create: cc,
	}
}

type (
	// CreationUpsertOne is the builder for "upsert"-ing
	//  one Creation node.
	CreationUpsertOne struct {
		create *CreationCreate
	}

	// CreationUpsert is the "OnConflict" setter.
	CreationUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *CreationUpsert) SetCreatedBy(v int64) *CreationUpsert {
	u.Set(creation.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *CreationUpsert) UpdateCreatedBy() *CreationUpsert {
	u.SetExcluded(creation.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *CreationUpsert) AddCreatedBy(v int64) *CreationUpsert {
	u.Add(creation.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CreationUpsert) SetUpdatedBy(v int64) *CreationUpsert {
	u.Set(creation.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CreationUpsert) UpdateUpdatedBy() *CreationUpsert {
	u.SetExcluded(creation.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *CreationUpsert) AddUpdatedBy(v int64) *CreationUpsert {
	u.Add(creation.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CreationUpsert) SetUpdatedAt(v time.Time) *CreationUpsert {
	u.Set(creation.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CreationUpsert) UpdateUpdatedAt() *CreationUpsert {
	u.SetExcluded(creation.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CreationUpsert) SetDeletedAt(v time.Time) *CreationUpsert {
	u.Set(creation.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CreationUpsert) UpdateDeletedAt() *CreationUpsert {
	u.SetExcluded(creation.FieldDeletedAt)
	return u
}

// SetCreationType sets the "creation_type" field.
func (u *CreationUpsert) SetCreationType(v enum.CreationType) *CreationUpsert {
	u.Set(creation.FieldCreationType, v)
	return u
}

// UpdateCreationType sets the "creation_type" field to the value that was provided on create.
func (u *CreationUpsert) UpdateCreationType() *CreationUpsert {
	u.SetExcluded(creation.FieldCreationType)
	return u
}

// SetParameter sets the "parameter" field.
func (u *CreationUpsert) SetParameter(v string) *CreationUpsert {
	u.Set(creation.FieldParameter, v)
	return u
}

// UpdateParameter sets the "parameter" field to the value that was provided on create.
func (u *CreationUpsert) UpdateParameter() *CreationUpsert {
	u.SetExcluded(creation.FieldParameter)
	return u
}

// SetURL sets the "url" field.
func (u *CreationUpsert) SetURL(v string) *CreationUpsert {
	u.Set(creation.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *CreationUpsert) UpdateURL() *CreationUpsert {
	u.SetExcluded(creation.FieldURL)
	return u
}

// SetUserID sets the "user_id" field.
func (u *CreationUpsert) SetUserID(v int64) *CreationUpsert {
	u.Set(creation.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CreationUpsert) UpdateUserID() *CreationUpsert {
	u.SetExcluded(creation.FieldUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Creation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(creation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CreationUpsertOne) UpdateNewValues() *CreationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(creation.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(creation.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Creation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CreationUpsertOne) Ignore() *CreationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CreationUpsertOne) DoNothing() *CreationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CreationCreate.OnConflict
// documentation for more info.
func (u *CreationUpsertOne) Update(set func(*CreationUpsert)) *CreationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CreationUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *CreationUpsertOne) SetCreatedBy(v int64) *CreationUpsertOne {
	return u.Update(func(s *CreationUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *CreationUpsertOne) AddCreatedBy(v int64) *CreationUpsertOne {
	return u.Update(func(s *CreationUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *CreationUpsertOne) UpdateCreatedBy() *CreationUpsertOne {
	return u.Update(func(s *CreationUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CreationUpsertOne) SetUpdatedBy(v int64) *CreationUpsertOne {
	return u.Update(func(s *CreationUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *CreationUpsertOne) AddUpdatedBy(v int64) *CreationUpsertOne {
	return u.Update(func(s *CreationUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CreationUpsertOne) UpdateUpdatedBy() *CreationUpsertOne {
	return u.Update(func(s *CreationUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CreationUpsertOne) SetUpdatedAt(v time.Time) *CreationUpsertOne {
	return u.Update(func(s *CreationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CreationUpsertOne) UpdateUpdatedAt() *CreationUpsertOne {
	return u.Update(func(s *CreationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CreationUpsertOne) SetDeletedAt(v time.Time) *CreationUpsertOne {
	return u.Update(func(s *CreationUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CreationUpsertOne) UpdateDeletedAt() *CreationUpsertOne {
	return u.Update(func(s *CreationUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetCreationType sets the "creation_type" field.
func (u *CreationUpsertOne) SetCreationType(v enum.CreationType) *CreationUpsertOne {
	return u.Update(func(s *CreationUpsert) {
		s.SetCreationType(v)
	})
}

// UpdateCreationType sets the "creation_type" field to the value that was provided on create.
func (u *CreationUpsertOne) UpdateCreationType() *CreationUpsertOne {
	return u.Update(func(s *CreationUpsert) {
		s.UpdateCreationType()
	})
}

// SetParameter sets the "parameter" field.
func (u *CreationUpsertOne) SetParameter(v string) *CreationUpsertOne {
	return u.Update(func(s *CreationUpsert) {
		s.SetParameter(v)
	})
}

// UpdateParameter sets the "parameter" field to the value that was provided on create.
func (u *CreationUpsertOne) UpdateParameter() *CreationUpsertOne {
	return u.Update(func(s *CreationUpsert) {
		s.UpdateParameter()
	})
}

// SetURL sets the "url" field.
func (u *CreationUpsertOne) SetURL(v string) *CreationUpsertOne {
	return u.Update(func(s *CreationUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *CreationUpsertOne) UpdateURL() *CreationUpsertOne {
	return u.Update(func(s *CreationUpsert) {
		s.UpdateURL()
	})
}

// SetUserID sets the "user_id" field.
func (u *CreationUpsertOne) SetUserID(v int64) *CreationUpsertOne {
	return u.Update(func(s *CreationUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CreationUpsertOne) UpdateUserID() *CreationUpsertOne {
	return u.Update(func(s *CreationUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *CreationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent_work: missing options for CreationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CreationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CreationUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CreationUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CreationCreateBulk is the builder for creating many Creation entities in bulk.
type CreationCreateBulk struct {
	config
	err      error
	builders []*CreationCreate
	conflict []sql.ConflictOption
}

// Save creates the Creation entities in the database.
func (ccb *CreationCreateBulk) Save(ctx context.Context) ([]*Creation, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Creation, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CreationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CreationCreateBulk) SaveX(ctx context.Context) []*Creation {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CreationCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CreationCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Creation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CreationUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (ccb *CreationCreateBulk) OnConflict(opts ...sql.ConflictOption) *CreationUpsertBulk {
	ccb.conflict = opts
	return &CreationUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Creation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CreationCreateBulk) OnConflictColumns(columns ...string) *CreationUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CreationUpsertBulk{
		create: ccb,
	}
}

// CreationUpsertBulk is the builder for "upsert"-ing
// a bulk of Creation nodes.
type CreationUpsertBulk struct {
	create *CreationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Creation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(creation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CreationUpsertBulk) UpdateNewValues() *CreationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(creation.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(creation.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Creation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CreationUpsertBulk) Ignore() *CreationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CreationUpsertBulk) DoNothing() *CreationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CreationCreateBulk.OnConflict
// documentation for more info.
func (u *CreationUpsertBulk) Update(set func(*CreationUpsert)) *CreationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CreationUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *CreationUpsertBulk) SetCreatedBy(v int64) *CreationUpsertBulk {
	return u.Update(func(s *CreationUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *CreationUpsertBulk) AddCreatedBy(v int64) *CreationUpsertBulk {
	return u.Update(func(s *CreationUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *CreationUpsertBulk) UpdateCreatedBy() *CreationUpsertBulk {
	return u.Update(func(s *CreationUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CreationUpsertBulk) SetUpdatedBy(v int64) *CreationUpsertBulk {
	return u.Update(func(s *CreationUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *CreationUpsertBulk) AddUpdatedBy(v int64) *CreationUpsertBulk {
	return u.Update(func(s *CreationUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CreationUpsertBulk) UpdateUpdatedBy() *CreationUpsertBulk {
	return u.Update(func(s *CreationUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CreationUpsertBulk) SetUpdatedAt(v time.Time) *CreationUpsertBulk {
	return u.Update(func(s *CreationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CreationUpsertBulk) UpdateUpdatedAt() *CreationUpsertBulk {
	return u.Update(func(s *CreationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CreationUpsertBulk) SetDeletedAt(v time.Time) *CreationUpsertBulk {
	return u.Update(func(s *CreationUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CreationUpsertBulk) UpdateDeletedAt() *CreationUpsertBulk {
	return u.Update(func(s *CreationUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetCreationType sets the "creation_type" field.
func (u *CreationUpsertBulk) SetCreationType(v enum.CreationType) *CreationUpsertBulk {
	return u.Update(func(s *CreationUpsert) {
		s.SetCreationType(v)
	})
}

// UpdateCreationType sets the "creation_type" field to the value that was provided on create.
func (u *CreationUpsertBulk) UpdateCreationType() *CreationUpsertBulk {
	return u.Update(func(s *CreationUpsert) {
		s.UpdateCreationType()
	})
}

// SetParameter sets the "parameter" field.
func (u *CreationUpsertBulk) SetParameter(v string) *CreationUpsertBulk {
	return u.Update(func(s *CreationUpsert) {
		s.SetParameter(v)
	})
}

// UpdateParameter sets the "parameter" field to the value that was provided on create.
func (u *CreationUpsertBulk) UpdateParameter() *CreationUpsertBulk {
	return u.Update(func(s *CreationUpsert) {
		s.UpdateParameter()
	})
}

// SetURL sets the "url" field.
func (u *CreationUpsertBulk) SetURL(v string) *CreationUpsertBulk {
	return u.Update(func(s *CreationUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *CreationUpsertBulk) UpdateURL() *CreationUpsertBulk {
	return u.Update(func(s *CreationUpsert) {
		s.UpdateURL()
	})
}

// SetUserID sets the "user_id" field.
func (u *CreationUpsertBulk) SetUserID(v int64) *CreationUpsertBulk {
	return u.Update(func(s *CreationUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CreationUpsertBulk) UpdateUserID() *CreationUpsertBulk {
	return u.Update(func(s *CreationUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *CreationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent_work: OnConflict was set for builder %d. Set it on the CreationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent_work: missing options for CreationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CreationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
