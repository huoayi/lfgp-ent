// Code generated by ent, DO NOT EDIT.

package ent_work

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/huoayi/lfgp-ent/pkg/ent_work/creation"
	"github.com/huoayi/lfgp-ent/pkg/ent_work/predicate"
	"github.com/huoayi/lfgp-ent/pkg/ent_work/user"
	"github.com/huoayi/lfgp-ent/pkg/enum"
)

// CreationUpdate is the builder for updating Creation entities.
type CreationUpdate struct {
	config
	hooks     []Hook
	mutation  *CreationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CreationUpdate builder.
func (cu *CreationUpdate) Where(ps ...predicate.Creation) *CreationUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedBy sets the "created_by" field.
func (cu *CreationUpdate) SetCreatedBy(i int64) *CreationUpdate {
	cu.mutation.ResetCreatedBy()
	cu.mutation.SetCreatedBy(i)
	return cu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cu *CreationUpdate) SetNillableCreatedBy(i *int64) *CreationUpdate {
	if i != nil {
		cu.SetCreatedBy(*i)
	}
	return cu
}

// AddCreatedBy adds i to the "created_by" field.
func (cu *CreationUpdate) AddCreatedBy(i int64) *CreationUpdate {
	cu.mutation.AddCreatedBy(i)
	return cu
}

// SetUpdatedBy sets the "updated_by" field.
func (cu *CreationUpdate) SetUpdatedBy(i int64) *CreationUpdate {
	cu.mutation.ResetUpdatedBy()
	cu.mutation.SetUpdatedBy(i)
	return cu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cu *CreationUpdate) SetNillableUpdatedBy(i *int64) *CreationUpdate {
	if i != nil {
		cu.SetUpdatedBy(*i)
	}
	return cu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (cu *CreationUpdate) AddUpdatedBy(i int64) *CreationUpdate {
	cu.mutation.AddUpdatedBy(i)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CreationUpdate) SetUpdatedAt(t time.Time) *CreationUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CreationUpdate) SetDeletedAt(t time.Time) *CreationUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CreationUpdate) SetNillableDeletedAt(t *time.Time) *CreationUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// SetCreationType sets the "creation_type" field.
func (cu *CreationUpdate) SetCreationType(et enum.CreationType) *CreationUpdate {
	cu.mutation.SetCreationType(et)
	return cu
}

// SetNillableCreationType sets the "creation_type" field if the given value is not nil.
func (cu *CreationUpdate) SetNillableCreationType(et *enum.CreationType) *CreationUpdate {
	if et != nil {
		cu.SetCreationType(*et)
	}
	return cu
}

// SetParameter sets the "parameter" field.
func (cu *CreationUpdate) SetParameter(s string) *CreationUpdate {
	cu.mutation.SetParameter(s)
	return cu
}

// SetNillableParameter sets the "parameter" field if the given value is not nil.
func (cu *CreationUpdate) SetNillableParameter(s *string) *CreationUpdate {
	if s != nil {
		cu.SetParameter(*s)
	}
	return cu
}

// SetURL sets the "url" field.
func (cu *CreationUpdate) SetURL(s string) *CreationUpdate {
	cu.mutation.SetURL(s)
	return cu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (cu *CreationUpdate) SetNillableURL(s *string) *CreationUpdate {
	if s != nil {
		cu.SetURL(*s)
	}
	return cu
}

// SetStatus sets the "status" field.
func (cu *CreationUpdate) SetStatus(c creation.Status) *CreationUpdate {
	cu.mutation.SetStatus(c)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CreationUpdate) SetNillableStatus(c *creation.Status) *CreationUpdate {
	if c != nil {
		cu.SetStatus(*c)
	}
	return cu
}

// SetUserID sets the "user_id" field.
func (cu *CreationUpdate) SetUserID(i int64) *CreationUpdate {
	cu.mutation.SetUserID(i)
	return cu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cu *CreationUpdate) SetNillableUserID(i *int64) *CreationUpdate {
	if i != nil {
		cu.SetUserID(*i)
	}
	return cu
}

// SetUser sets the "user" edge to the User entity.
func (cu *CreationUpdate) SetUser(u *User) *CreationUpdate {
	return cu.SetUserID(u.ID)
}

// Mutation returns the CreationMutation object of the builder.
func (cu *CreationUpdate) Mutation() *CreationMutation {
	return cu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cu *CreationUpdate) ClearUser() *CreationUpdate {
	cu.mutation.ClearUser()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CreationUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CreationUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CreationUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CreationUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CreationUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := creation.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CreationUpdate) check() error {
	if v, ok := cu.mutation.CreationType(); ok {
		if err := creation.CreationTypeValidator(v); err != nil {
			return &ValidationError{Name: "creation_type", err: fmt.Errorf(`ent_work: validator failed for field "Creation.creation_type": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Status(); ok {
		if err := creation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent_work: validator failed for field "Creation.status": %w`, err)}
		}
	}
	if _, ok := cu.mutation.UserID(); cu.mutation.UserCleared() && !ok {
		return errors.New(`ent_work: clearing a required unique edge "Creation.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CreationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CreationUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CreationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(creation.Table, creation.Columns, sqlgraph.NewFieldSpec(creation.FieldID, field.TypeInt64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedBy(); ok {
		_spec.SetField(creation.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(creation.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.UpdatedBy(); ok {
		_spec.SetField(creation.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(creation.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(creation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(creation.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.CreationType(); ok {
		_spec.SetField(creation.FieldCreationType, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.Parameter(); ok {
		_spec.SetField(creation.FieldParameter, field.TypeString, value)
	}
	if value, ok := cu.mutation.URL(); ok {
		_spec.SetField(creation.FieldURL, field.TypeString, value)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(creation.FieldStatus, field.TypeEnum, value)
	}
	if cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   creation.UserTable,
			Columns: []string{creation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   creation.UserTable,
			Columns: []string{creation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{creation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CreationUpdateOne is the builder for updating a single Creation entity.
type CreationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CreationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (cuo *CreationUpdateOne) SetCreatedBy(i int64) *CreationUpdateOne {
	cuo.mutation.ResetCreatedBy()
	cuo.mutation.SetCreatedBy(i)
	return cuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cuo *CreationUpdateOne) SetNillableCreatedBy(i *int64) *CreationUpdateOne {
	if i != nil {
		cuo.SetCreatedBy(*i)
	}
	return cuo
}

// AddCreatedBy adds i to the "created_by" field.
func (cuo *CreationUpdateOne) AddCreatedBy(i int64) *CreationUpdateOne {
	cuo.mutation.AddCreatedBy(i)
	return cuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cuo *CreationUpdateOne) SetUpdatedBy(i int64) *CreationUpdateOne {
	cuo.mutation.ResetUpdatedBy()
	cuo.mutation.SetUpdatedBy(i)
	return cuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cuo *CreationUpdateOne) SetNillableUpdatedBy(i *int64) *CreationUpdateOne {
	if i != nil {
		cuo.SetUpdatedBy(*i)
	}
	return cuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (cuo *CreationUpdateOne) AddUpdatedBy(i int64) *CreationUpdateOne {
	cuo.mutation.AddUpdatedBy(i)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CreationUpdateOne) SetUpdatedAt(t time.Time) *CreationUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CreationUpdateOne) SetDeletedAt(t time.Time) *CreationUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CreationUpdateOne) SetNillableDeletedAt(t *time.Time) *CreationUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// SetCreationType sets the "creation_type" field.
func (cuo *CreationUpdateOne) SetCreationType(et enum.CreationType) *CreationUpdateOne {
	cuo.mutation.SetCreationType(et)
	return cuo
}

// SetNillableCreationType sets the "creation_type" field if the given value is not nil.
func (cuo *CreationUpdateOne) SetNillableCreationType(et *enum.CreationType) *CreationUpdateOne {
	if et != nil {
		cuo.SetCreationType(*et)
	}
	return cuo
}

// SetParameter sets the "parameter" field.
func (cuo *CreationUpdateOne) SetParameter(s string) *CreationUpdateOne {
	cuo.mutation.SetParameter(s)
	return cuo
}

// SetNillableParameter sets the "parameter" field if the given value is not nil.
func (cuo *CreationUpdateOne) SetNillableParameter(s *string) *CreationUpdateOne {
	if s != nil {
		cuo.SetParameter(*s)
	}
	return cuo
}

// SetURL sets the "url" field.
func (cuo *CreationUpdateOne) SetURL(s string) *CreationUpdateOne {
	cuo.mutation.SetURL(s)
	return cuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (cuo *CreationUpdateOne) SetNillableURL(s *string) *CreationUpdateOne {
	if s != nil {
		cuo.SetURL(*s)
	}
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CreationUpdateOne) SetStatus(c creation.Status) *CreationUpdateOne {
	cuo.mutation.SetStatus(c)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CreationUpdateOne) SetNillableStatus(c *creation.Status) *CreationUpdateOne {
	if c != nil {
		cuo.SetStatus(*c)
	}
	return cuo
}

// SetUserID sets the "user_id" field.
func (cuo *CreationUpdateOne) SetUserID(i int64) *CreationUpdateOne {
	cuo.mutation.SetUserID(i)
	return cuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cuo *CreationUpdateOne) SetNillableUserID(i *int64) *CreationUpdateOne {
	if i != nil {
		cuo.SetUserID(*i)
	}
	return cuo
}

// SetUser sets the "user" edge to the User entity.
func (cuo *CreationUpdateOne) SetUser(u *User) *CreationUpdateOne {
	return cuo.SetUserID(u.ID)
}

// Mutation returns the CreationMutation object of the builder.
func (cuo *CreationUpdateOne) Mutation() *CreationMutation {
	return cuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cuo *CreationUpdateOne) ClearUser() *CreationUpdateOne {
	cuo.mutation.ClearUser()
	return cuo
}

// Where appends a list predicates to the CreationUpdate builder.
func (cuo *CreationUpdateOne) Where(ps ...predicate.Creation) *CreationUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CreationUpdateOne) Select(field string, fields ...string) *CreationUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Creation entity.
func (cuo *CreationUpdateOne) Save(ctx context.Context) (*Creation, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CreationUpdateOne) SaveX(ctx context.Context) *Creation {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CreationUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CreationUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CreationUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := creation.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CreationUpdateOne) check() error {
	if v, ok := cuo.mutation.CreationType(); ok {
		if err := creation.CreationTypeValidator(v); err != nil {
			return &ValidationError{Name: "creation_type", err: fmt.Errorf(`ent_work: validator failed for field "Creation.creation_type": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Status(); ok {
		if err := creation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent_work: validator failed for field "Creation.status": %w`, err)}
		}
	}
	if _, ok := cuo.mutation.UserID(); cuo.mutation.UserCleared() && !ok {
		return errors.New(`ent_work: clearing a required unique edge "Creation.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CreationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CreationUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CreationUpdateOne) sqlSave(ctx context.Context) (_node *Creation, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(creation.Table, creation.Columns, sqlgraph.NewFieldSpec(creation.FieldID, field.TypeInt64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent_work: missing "Creation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, creation.FieldID)
		for _, f := range fields {
			if !creation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent_work: invalid field %q for query", f)}
			}
			if f != creation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedBy(); ok {
		_spec.SetField(creation.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(creation.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.UpdatedBy(); ok {
		_spec.SetField(creation.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(creation.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(creation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(creation.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.CreationType(); ok {
		_spec.SetField(creation.FieldCreationType, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.Parameter(); ok {
		_spec.SetField(creation.FieldParameter, field.TypeString, value)
	}
	if value, ok := cuo.mutation.URL(); ok {
		_spec.SetField(creation.FieldURL, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(creation.FieldStatus, field.TypeEnum, value)
	}
	if cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   creation.UserTable,
			Columns: []string{creation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   creation.UserTable,
			Columns: []string{creation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Creation{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{creation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
